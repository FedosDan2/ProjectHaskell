from tkinter import filedialog, messagebox
from PIL import Image, ImageTk, ImageEnhance, ImageOps
import subprocess
import os
from function_main_helper import Helper_Function
from common import ImageProcces_and_TopMenu
import customtkinter as ctk

class ImageProcces_and_TopMenu:
    def __init__(self, window):
        self.window = window
        self.layers = []
        self.images = []
        self.current_layer = None
        self.buttons_created = False
        self.mult_process_on = False
        self.func_helper = Helper_Function(self)

    # üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    def save_image(self):
        if self.window.edited_image:
            file_path = filedialog.asksaveasfilename(defaultextension=".png", filetypes=[("PNG files", "*.png")])
            if file_path:
                self.window.edited_image.save(file_path)
                messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
        else:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")
            
    # üìÇ –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    def open_image(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –∫–∞–∫ —Å–ª–æ–π."""
        file_path = filedialog.askopenfilename(filetypes=[("Image files", "*.jpg;*.png;*.jpeg")])
        if file_path:
            self.window.image_path = file_path
            self.window.image = Image.open(file_path)
            self.window.edited_image = self.window.image.copy()

            new_width = int(self.window.edited_image.width * 0.6) 
            new_height = int(self.window.edited_image.height * 0.6)  

            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            self.window.edited_image = self.window.edited_image.resize((new_width, new_height), Image.Resampling.LANCZOS)

            self.add_layer()
            self.display_image(self.window.edited_image)
        if self.window.image_path:
            self.convert_to_png(self.window.image_path)
        
        self.adjust_brightness(0.7, 1)
        self.save_difference()
        self.current_layer["layer_index"] = len(self.layers)

    # –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ .png
    def convert_to_png(self, input_path, output_path=None):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç PNG."""
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é (–Ω–µ —á–µ—Ä–µ–∑ open_image)
            with Image.open(input_path) as img:
                # –ï—Å–ª–∏ –≤—ã—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å –Ω–µ –∑–∞–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ –∂–µ –∏–º—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .png
                if not output_path:
                    base = os.path.splitext(input_path)[0]
                    output_path = f"{base}.png"
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ RGB –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                if img.mode in ("RGBA", "P"):
                    img = img.convert("RGB")
                
                img.save(output_path, format="PNG")
                print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {output_path}")
                return output_path

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
            return None

    # –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—è
    def add_layer(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–ª–æ–π –∏ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã–º"""
        new_layer = {
            "name": f"–°–ª–æ–π {len(self.layers) + 1}",
            "image": self.window.edited_image.copy() if self.window.edited_image else None,
            "button": None,
            "brightness_value": 1.0,  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "copy": self.window.edited_image.copy() if self.window.edited_image else None,  # –•—Ä–∞–Ω–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª —Å–ª–æ—è
            "scale_value": 1.0,
            "bright_flag": False,
            "scale_flag": False,
            "scale_frame": False,
            "bright_frame": False,
            "br_flag_saved": True,
            "pixel_value": 1,
            "pixel_flag": False,
            "pixel_frame": False,
            "pixel_flag_saved": True,
            "contrast_value": 1,
            "contrast_flag": False,
            "contrast_frame": False,
            "rotation_value": 0,
            "rotation_frame": False,
            "rotation_flag": False,
            "position_x": 0,
            "position_y": 0            
        }

        new_layer["button"] = ctk.CTkButton(
            self.window.layers_list, text=new_layer["name"], command=lambda l=new_layer: self.select_layer(l)
        )
        new_layer["button"].pack(fill="x", pady=2, padx=5)

        self.layers.append(new_layer)
        self.select_layer(new_layer)  # –î–µ–ª–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–π –∞–∫—Ç–∏–≤–Ω—ã–º
    
    
    # –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ—è
    def select_layer(self, layer):
        """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª–æ–π –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –µ–≥–æ –Ω–∞ canvas."""
        self.current_layer = layer  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ª–æ–π
        # –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—è
        for l in self.layers:
            l["button"].configure(fg_color="blue")
        layer["button"].configure(fg_color="red")

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–µ –∫ —ç—Ç–æ–º—É —Å–ª–æ—é
        if layer["image"]:
            self.window.edited_image = self.current_layer["image"]   # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–æ—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É
            self.display_image(layer["image"])
        
        if self.current_layer["bright_flag"] == True:
            self.window.brightness_frame.destroy()
            self.window.brightness_frame = None
            self.current_layer["bright_flag"] = False
            self.current_layer["bright_frame"] = False

        if (self.current_layer["bright_flag"] == False) and (self.current_layer["bright_frame"] == True):
            self.current_layer["bright_flag"] = True
            self.create_brightness_slider() 

        if self.current_layer["scale_flag"] == True:
            self.window.scale_frame.destroy()
            self.window.scale_frame = None
            self.current_layer["scale_flag"] = False
            self.current_layer["scale_frame"] = False

        if (self.current_layer["scale_flag"] == False) and (self.current_layer["scale_frame"] == True):
            self.current_layer["scale_flag"] = True
            self._create_scale_slider_frame()


    def remove_layer(self):
        """–£–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–ª–æ–π."""
        answer = messagebox.askyesno("Warning", "Do you want to save picture?")
        if answer:
            self.save_image()

        if not hasattr(self, "layers") or not self.layers:
            print("–û—à–∏–±–∫–∞: –ù–µ—Ç —Å–ª–æ–µ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        if not hasattr(self, "current_layer"):
            print("–û—à–∏–±–∫–∞: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—è.")
            return

        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–ª–æ–π –∏–∑ —Å–ø–∏—Å–∫–∞
        layer_to_remove = self.current_layer
        self.layers.remove(layer_to_remove)

        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–ª–æ—è –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        layer_to_remove["button"].destroy()
        # –ï—Å–ª–∏ —Å–ª–æ–∏ –æ—Å—Ç–∞–ª–∏—Å—å, –≤—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—É—â–∏–π —Å–ª–æ–π
        if self.layers:
            # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–æ–π (–∏–ª–∏ –ø–µ—Ä–≤—ã–π, –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–π –±—ã–ª –ø–µ—Ä–≤—ã–º)
            new_index = max(0, self.layers.index(self.current_layer) - 1)
            self.current_layer = self.layers[new_index]
            self.select_layer(self.current_layer)  # –î–µ–ª–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–π –∞–∫—Ç–∏–≤–Ω—ã–º
        else:
            # –ï—Å–ª–∏ —Å–ª–æ–µ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –æ—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ª–æ–π –∏ —Ö–æ–ª—Å—Ç
            self.current_layer = None
            self.window.edited_image = None
            self.window.canvas.delete("all")  # –û—á–∏—â–∞–µ–º —Ö–æ–ª—Å—Ç
            print("–í—Å–µ —Å–ª–æ–∏ —É–¥–∞–ª–µ–Ω—ã.")


    # –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ canvas
    def display_image(self, image):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ canvas"""
        if image:
            photo = ImageTk.PhotoImage(image)
            self.window.canvas.delete("all")
            self.window.canvas.create_image(600, 400, image=photo, anchor="center")
            self.window.canvas.image = photo  


     # üîπ –ú–µ–Ω—é (File)
    def top_menu1(self):
        options = ["üìÇ Open", "üíæ Save", "üö™ Exit"]
        self.menu_combobox1 = ctk.CTkComboBox(self.window.top_frame, values=options, command=self.menu_action1)
        self.menu_combobox1.pack(side="left", padx=2)
        self.menu_combobox1.set("File")

    def menu_action1(self, choice):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞."""
        if choice == "üìÇ Open":
            self.open_image()
        elif choice == "üíæ Save":
            self.save_image()
        elif choice == "üö™ Exit":
            self.button_active()

    # üîπ –ú–µ–Ω—é (General)
    def top_menu3(self):
        options = ["Documentation", "About us...", "Future"]
        self.menu_combobox3 = ctk.CTkComboBox(self.window.top_frame, values=options, command=self.menu_action3)
        self.menu_combobox3.pack(side="left", padx=2)
        self.menu_combobox3.set("General")

    def menu_action3(self, choice):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞."""
        if choice == "Documentation":
            messagebox.showinfo("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
        elif choice == "About us...":
            messagebox.showinfo("–û –Ω–∞—Å", "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: ...")
        elif choice == "Future":
            messagebox.showinfo("–ë—É–¥—É—â–µ–µ", "–ë—É–¥—É—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.")

    def button_active(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º."""
        answer = messagebox.askokcancel("Warning", "Do you want to quit?")
        if answer:
            self.window.root.destroy()
            #–û—á–∏—â–∞–µ–º –ø–∞–ø–∫–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            folderinput_path = "temp/inputPath"
            for file_name in os.listdir(folderinput_path):
                file_path = os.path.join(folderinput_path, file_name)
                self.delete_file(file_path)

            folderoutput_path = "temp/outputPath"
            for file_name in os.listdir(folderoutput_path):
                file_path = os.path.join(folderoutput_path, file_name)
                self.delete_file(file_path)

     # üîπ –ú–µ–Ω—é (Color corrections)
    def color_corrections(self):
        self.buttons_container = ctk.CTkFrame(self.window.tools_frame, fg_color="#535353")
        self.buttons_container.pack(fill="both", expand=True, padx=5, pady=5)
        
        options = ["Negative", "Grayscale", "Solarize", "Sepia", "Contrast"]
        self.menu_combobox1 = ctk.CTkComboBox(self.buttons_container, values=options, font=("TimesNewRoman", 15, "bold"), command=self.menu_color_corrections)
        self.menu_combobox1.pack(fill="both", padx=2)
        self.menu_combobox1.set("Color corrections")

    def menu_color_corrections(self, choice):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞."""
        if choice == "Negative":
            self.invert_colors()
        elif choice == "Grayscale":
            self.to_black_white()
        elif choice == "Solarize":
            self.to_solarize()
        elif choice == "Sepia":
            self.to_sepia()
        elif choice == "Contrast":
            self.create_contrast_slider()
    
     # üîπ –ú–µ–Ω—é (Image Transforms)
    def geometry_transform(self):
        self.buttons_container = ctk.CTkFrame(self.window.tools_frame, fg_color="#535353")
        self.buttons_container.pack(fill="both", expand=True, padx=5, pady=5)
        
        options = ["Rotation", "Scaling", "Horizontal flip", "Vertical flip"]
        self.menu_combobox1 = ctk.CTkComboBox(self.buttons_container, values=options, font=("TimesNewRoman", 15, "bold"), command=self.menu_transforms)
        self.menu_combobox1.pack(fill="both", padx=2)
        self.menu_combobox1.set("Geometry Transforms")

    def menu_transforms(self, choice):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞."""
        if choice == "Rotation":
            self.create_rotation_slider()
        elif choice == "Scaling":
            self.create_scale_slider()
        elif choice == "Horizontal flip":
            self.hor_flip()
        elif choice == "Vertical flip":
            self.vert_flip() 
        
    # üîπ –ú–µ–Ω—é (Effects)
    def image_effects(self):
        self.buttons_container = ctk.CTkFrame(self.window.tools_frame, fg_color="#535353")
        self.buttons_container.pack(fill="both", expand=True, padx=5, pady=5)
        
        options = ["Brightness", "Pixelate", "Sharpen"]
        self.menu_combobox1 = ctk.CTkComboBox(self.buttons_container, values=options, font=("TimesNewRoman", 15, "bold"), command=self.menu_effects)
        self.menu_combobox1.pack(fill="both", padx=2)
        self.menu_combobox1.set("Image Effects")

    def menu_effects(self, choice):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞."""
        if choice == "Brightness":
            self.create_brightness_slider()
        elif choice == "Pixelate":
            self.create_pixelate_slider()
        elif choice == "Sharpen":
            self.to_sharpen()
        
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    def save_difference(self):
        self.current_layer["copy"] = self.current_layer["image"]
        self.display_image(self.current_layer["image"])
        self.window.negative_flag = False
        self.window.sepia_flag = False
        self.window.grayscale_flag = False
        if self.window.brightness_frame:
            self.window.brightness_frame.destroy()
        if self.window.scale_frame:
            self.window.scale_frame.destroy()
        if self.window.pixel_frame:
            self.window.pixel_frame.destroy()
        if self.window.contrast_frame:
            self.window.contrast_frame.destroy()
        if self.window.rotation_frame:
            self.window.rotation_frame.destroy()
        self.window.scale_frame = None
        self.window.scale_flag = False
        self.window.pixel_frame = None
        self.window.pixel_flag = False
        self.window.contrast_frame = None
        self.window.contrast_flag = False
        self.window.rotation_frame = None
        self.window.rotation_flag = False
        self.window.brightness_frame = None
        self.window.brightness_flag = False
        self.current_layer["bright_flag"] = False
        self.current_layer["bright_frame"] = False
        self.current_layer["scale_flag"] = False
        self.current_layer["scale_frame"] = False
        self.current_layer["pixel_frame"] = False
        self.current_layer["pixel_flag"] = False
        self.current_layer["contrast_frame"] = False
        self.current_layer["contrast_flag"] = False
        self.current_layer["rotation_frame"] = False
        self.current_layer["rotation_flag"] = False
        
        
        self.current_layer["br_flag_saved"] = True

    # –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    def delete_file(self, file_path):
        os.remove(file_path)

# –§—É–Ω–∫—Ü–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å Haskell
    # –§—É–Ω–∫—Ü–∏—è Negative
    def invert_colors(self):
        """–ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ü–≤–µ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è Haskell (Negative.hs)."""
        if self.mult_process_on:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            for i in range(len(self.mult_images)):
                self.mult_images[i] = self.func_helper._apply_invert_filter(self.mult_images[i], i)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.display_mult_image(self.mult_images[self.current_image_index])
        else:
            if self.current_layer and self.current_layer["image"]:
                image_path = "HaskProj/temp/inputPath/input_invert.png"
                output_path = "HaskProj/temp/outputPath/output_invert.png"
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                os.makedirs("HaskProj", exist_ok=True)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                self.current_layer["copy"].save(image_path)
                if self.window.negative_flag:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    self.current_layer["image"] = self.current_layer["copy"]
                    self.window.negative_flag = False
                else:
                    try:
                        # –í—ã–∑—ã–≤–∞–µ–º Haskell-–ø—Ä–æ–≥—Ä–∞–º–º—É Negative.hs —Å –ø–æ–º–æ—â—å—é runhaskell
                        subprocess.run([
                            "./backend_Erbol/Function/ImageProcessing/Negative/negative",
                            image_path,
                            output_path
                        ], check=True)
                        
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        with Image.open(output_path) as img:
                            filtered_image = img.copy()  # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
                        
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        self.delete_file(output_path)
                        self.delete_file(image_path)

                        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ª–æ–µ
                        self.current_layer["image"] = filtered_image
                        self.window.edited_image = filtered_image
                        self.window.negative_flag = True
                    except subprocess.CalledProcessError as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Haskell-—Ñ–∏–ª—å—Ç—Ä–∞: {e}")
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                self.display_image(self.current_layer["image"])

    # –§—É–Ω–∫—Ü–∏—è –ß\–ë
    def to_black_white(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–∂–¥—É —Ü–≤–µ—Ç–Ω—ã–º –∏ —á–µ—Ä–Ω–æ-–±–µ–ª—ã–º, –∏—Å–ø–æ–ª—å–∑—É—è Haskell (Grayscale.hs)."""
        if self.mult_process_on:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            for i in range(len(self.mult_images)):
                self.mult_images[i] = self.func_helper._apply_grayscale_filter(self.mult_images[i], i)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.display_mult_image(self.mult_images[self.current_image_index])
        else:
            if self.current_layer and self.current_layer["image"]:
                image_path = "HaskProj/temp/inputPath/input_bw.png"
                output_path = "HaskProj/temp/outputPath/output_bw.png"
                os.makedirs("HaskProj", exist_ok=True)
                self.current_layer["copy"].save(image_path)
                if self.window.grayscale_flag:
                    self.current_layer["image"] = self.current_layer["copy"]
                    self.window.grayscale_flag = False
                else:
                    try:
                        subprocess.run([
                            "./backend_Erbol/Function/ImageProcessing/Grayscale/grayscale",
                            image_path,
                            output_path
                        ], check=True)

                        with Image.open(output_path) as img:
                            filtered_image = img.copy()  # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
                        
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        self.delete_file(output_path)
                        self.delete_file(image_path)

                        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ª–æ–µ
                        self.current_layer["image"] = filtered_image
                        self.window.edited_image = filtered_image
                        self.window.grayscale_flag = True
                    except subprocess.CalledProcessError as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Haskell-—Ñ–∏–ª—å—Ç—Ä–∞ (Grayscale): {e}")
                self.display_image(self.current_layer["image"])

    # –§—É–Ω–∫—Ü–∏—è Solarize
    def to_solarize(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å–µ–ø–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è Haskell (Solarize.hs)."""
        if self.mult_process_on:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            for i in range(len(self.mult_images)):
                self.mult_images[i] = self.func_helper._apply_solarize_filter(self.mult_images[i], i)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.display_mult_image(self.mult_images[self.current_image_index])
        else:
            if self.current_layer and self.current_layer["image"]:
                image_path = "HaskProj/temp/inputPath/input_solarize.png"
                output_path = "HaskProj/temp/outputPath/output_solarize.png"
                os.makedirs("HaskProj", exist_ok=True)
                self.current_layer["copy"].save(image_path)
                if self.window.solarize_flag:
                    self.current_layer["image"] = self.current_layer["copy"]
                    self.window.solarize_flag = False
                    
                else:
                    try:
                        subprocess.run([
                            "./backend_Erbol/Function/ImageProcessing/Solarize/solarize",
                            image_path,
                            output_path
                        ], check=True)
                        with Image.open(output_path) as img:
                            filtered_image = img.copy()  # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
                        
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        self.delete_file(output_path)
                        self.delete_file(image_path)

                        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ª–æ–µ
                        self.current_layer["image"] = filtered_image
                        self.window.edited_image = filtered_image
                        self.window.solarize_flag = True
                    except subprocess.CalledProcessError as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Haskell-—Ñ–∏–ª—å—Ç—Ä–∞ (Solarize): {e}")
                self.display_image(self.current_layer["image"])

    # –§—É–Ω–∫—Ü–∏—è Sepia
    def to_sepia(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å–µ–ø–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è Haskell (Solarize.hs)."""
        if self.mult_process_on:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            for i in range(len(self.mult_images)):
                self.mult_images[i] = self.func_helper._apply_sepia_filter(self.mult_images[i], i)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.display_mult_image(self.mult_images[self.current_image_index])
        else:
            if self.current_layer and self.current_layer["image"]:
                image_path = "HaskProj/temp/inputPath/input_sepia.png"
                output_path = "HaskProj/temp/outputPath/output_sepia.png"
                os.makedirs("HaskProj", exist_ok=True)
                self.current_layer["copy"].save(image_path)
                if self.window.sepia_flag:
                    self.current_layer["image"] = self.current_layer["copy"]
                    self.window.sepia_flag = False
                    
                else:
                    try:
                        subprocess.run([
                            "./backend_Erbol/Function/ImageProcessing/Sepia/sepia",
                            image_path,
                            output_path
                        ], check=True)
                        with Image.open(output_path) as img:
                            filtered_image = img.copy()  # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
                        
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        self.delete_file(output_path)
                        self.delete_file(image_path)

                        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ª–æ–µ
                        self.current_layer["image"] = filtered_image
                        self.window.edited_image = filtered_image
                        self.window.sepia_flag = True
                    except subprocess.CalledProcessError as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Haskell-—Ñ–∏–ª—å—Ç—Ä–∞ (Solarize): {e}")
                self.display_image(self.current_layer["image"])

    # –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —è—Ä–∫–æ—Å—Ç–∏
    def adjust_brightness(self, value, starter):
        """–†–µ–≥—É–ª–∏—Ä—É–µ—Ç —è—Ä–∫–æ—Å—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —è—Ä–∫–æ—Å—Ç–∏ –≤ Haskell."""
        if self.mult_process_on:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            factor = float(value)
            for i in range(len(self.mult_images)):
                self.mult_images[i] = self.func_helper._apply_brightness_filter(self.mult_images[i], i, factor)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.display_mult_image(self.mult_images[self.current_image_index])
        else:
            if self.current_layer and self.current_layer["image"]:
                factor = float(value)
                if abs(factor - self.current_layer["brightness_value"]) < 0.01:
                    return  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                self.current_layer["brightness_value"] = factor

                image_path = "HaskProj/temp/inputPath/input_brightness.png"
                output_path = "HaskProj/temp/outputPath/output_brightness.png"
                os.makedirs("HaskProj", exist_ok=True)
                self.current_layer["copy"].save(image_path)

                try:
                    subprocess.run([
                        "./backend_Erbol/Function/ImageEffects/Brightness/brightness",
                        image_path,
                        output_path,
                        str(factor)
                    ], check=True)

                    with Image.open(output_path) as img:
                        filtered_image = img.copy()

                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                    self.delete_file(output_path)
                    self.delete_file(image_path)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ª–æ–µ
                    self.current_layer["image"] = filtered_image
                    self.window.edited_image = filtered_image
                    if starter == 1:
                        self.current_layer["br_flag_saved"] = True
                    else:
                        self.current_layer["br_flag_saved"] = False
                    self.display_image(filtered_image)
                except subprocess.CalledProcessError as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Haskell-—Ñ–∏–ª—å—Ç—Ä–∞ (Brightness): {e}")
            else:
                if self.window.brightness_frame:
                    self.window.brightness_frame.destroy()
                    self.window.brightness_frame = None
                    self.current_layer["bright_frame"] = False
                    self.current_layer["bright_flag"] = False

    # –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–Ω–∞–Ω–∏—è –ø–æ–ª–∑—É–Ω–∫–∞ –¥–ª—è —è—Ä–∫–æ—Å—Ç–∏
    def create_brightness_slider(self):
        """–°–æ–∑–¥–∞—ë—Ç –æ–∫–Ω–æ —Å –ø–æ–ª–∑—É–Ω–∫–æ–º –¥–ª—è —è—Ä–∫–æ—Å—Ç–∏ –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è."""
        def on_slider_release(event):
            try:
                value = float(brightness_slider.get())
                if 0.0 <= value <= 2.0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
                    self.adjust_brightness(value, 0)
                else:
                    print("–û—à–∏–±–∫–∞: –ó–Ω–∞—á–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
            except ValueError:
                print("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏.")
        
        if self.mult_process_on:
            try: # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ—Ä–µ–π–º –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞ —è—Ä–∫–æ—Å—Ç–∏
                self.window.brightness_frame = ctk.CTkFrame(self.window.right_panel, height=300, width=300)
                self.window.brightness_frame.pack(pady=10)

                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∑—É–Ω–æ–∫ —è—Ä–∫–æ—Å—Ç–∏
                brightness_slider = ctk.CTkSlider(
                    master=self.window.brightness_frame,
                    from_=0.0,
                    to=1.0,
                    command=lambda value: None  # –ù–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
                )
                brightness_slider.pack(pady=10)
                
                brightness_slider.set(1.0)
                # –ü—Ä–∏–º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –±–µ–≥—É–Ω–∫–∞
                brightness_slider.bind("<ButtonRelease-1>", on_slider_release)
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª–∑—É–Ω–∫–∞ —è—Ä–∫–æ—Å—Ç–∏: {e}")



        if self.current_layer["bright_flag"]:
            # –ï—Å–ª–∏ –æ–∫–Ω–æ –ø–æ–ª–∑—É–Ω–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
            if self.current_layer["bright_frame"]:
                self.window.brightness_frame.destroy()
                self.window.brightness_frame = None
                self.current_layer["bright_flag"] = False
                self.current_layer["bright_frame"] = False
        else:
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ—Ä–µ–π–º –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞ —è—Ä–∫–æ—Å—Ç–∏
                self.window.brightness_frame = ctk.CTkFrame(self.window.right_panel, height=300, width=300)
                self.window.brightness_frame.pack(pady=10)

                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∑—É–Ω–æ–∫ —è—Ä–∫–æ—Å—Ç–∏
                brightness_slider = ctk.CTkSlider(
                    master=self.window.brightness_frame,
                    from_=0.0,
                    to=1.0,
                    command=lambda value: None  # –ù–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
                )
                brightness_slider.pack(pady=10)
                if (self.current_layer["br_flag_saved"] == True):
                    brightness_slider.set(1.0)
                else:
                    brightness_slider.set(self.current_layer["brightness_value"])  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

                # –ü—Ä–∏–º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –±–µ–≥—É–Ω–∫–∞
                brightness_slider.bind("<ButtonRelease-1>", on_slider_release)

                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∫–Ω–∞ –ø–æ–ª–∑—É–Ω–∫–∞
                self.current_layer["bright_flag"] = True
                self.current_layer["bright_frame"] = True

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª–∑—É–Ω–∫–∞ —è—Ä–∫–æ—Å—Ç–∏: {e}")

    def adjust_scale(self, value):
        """–†–µ–≥—É–ª–∏—Ä—É–µ—Ç –º–∞—Å—à—Ç–∞–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Haskell."""
        if self.mult_process_on:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            scale_factor = float(value)
            for i in range(len(self.mult_images)):
                self.mult_images[i] = self.func_helper._apply_scale_filter(self.mult_images[i], i, scale_factor)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.display_mult_image(self.mult_images[self.current_image_index])
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if self.current_layer and self.current_layer["image"]:
                scale_factor = float(value)
                if abs(scale_factor - self.current_layer["scale_value"]) < 0.01:
                    return  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                self.current_layer["scale_value"] = scale_factor

                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
                self.current_layer["image"] = self.func_helper._apply_scale_filter(self.current_layer["copy"], 0, scale_factor)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                self.display_image(self.current_layer["image"])
            else:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ—Ä–µ–π–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
                if self.window.scale_frame:
                    self.window.scale_frame.destroy()
                    self.window.scale_frame = None
                    self.current_layer["scale_frame"] = False
                    self.current_layer["scale_flag"] = False

    def create_scale_slider(self):
        """–°–æ–∑–¥–∞—ë—Ç –æ–∫–Ω–æ —Å –ø–æ–ª–∑—É–Ω–∫–æ–º –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è."""
        def on_slider_release(event):
            try:
                value = float(scale_slider.get())
                if 0.1 <= value <= 4.0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
                    self.adjust_scale(value)
                else:
                    print("–û—à–∏–±–∫–∞: –ó–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
            except ValueError:
                print("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞.")

        if self.mult_process_on:
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ—Ä–µ–π–º –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
                self.window.scale_frame = ctk.CTkFrame(self.window.right_panel, height=300, width=300)
                self.window.scale_frame.pack(pady=10)

                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∑—É–Ω–æ–∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
                scale_slider = ctk.CTkSlider(
                    master=self.window.scale_frame,
                    from_=0.1,
                    to=4.0,
                    number_of_steps=40,
                    command=lambda value: None  # –ù–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
                )
                scale_slider.pack(pady=10)
                scale_slider.set(1.0)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

                # –ü—Ä–∏–º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –±–µ–≥—É–Ω–∫–∞
                scale_slider.bind("<ButtonRelease-1>", on_slider_release)

                # –¢–µ–∫—Å—Ç–æ–≤–∞—è –º–µ—Ç–∫–∞
                ctk.CTkLabel(
                    self.window.scale_frame,
                    text="–ú–∞—Å—à—Ç–∞–± (0.1x - 4.0x)"
                ).pack(pady=2)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª–∑—É–Ω–∫–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

        if self.current_layer["scale_flag"]:
            # –ï—Å–ª–∏ –æ–∫–Ω–æ –ø–æ–ª–∑—É–Ω–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
            if self.current_layer["scale_frame"]:
                self.window.scale_frame.destroy()
                self.window.scale_frame = None
                self.current_layer["scale_flag"] = False
                self.current_layer["scale_frame"] = False
        else:
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ—Ä–µ–π–º –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
                self.window.scale_frame = ctk.CTkFrame(self.window.right_panel, height=300, width=300)
                self.window.scale_frame.pack(pady=10)

                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∑—É–Ω–æ–∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
                scale_slider = ctk.CTkSlider(
                    master=self.window.scale_frame,
                    from_=0.1,
                    to=4.0,
                    number_of_steps=40,
                    command=lambda value: None  # –ù–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
                )
                scale_slider.pack(pady=10)
                if self.current_layer["scale_value"]:
                    scale_slider.set(self.current_layer["scale_value"])  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                else:
                    scale_slider.set(1.0)

                # –ü—Ä–∏–º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –±–µ–≥—É–Ω–∫–∞
                scale_slider.bind("<ButtonRelease-1>", on_slider_release)

                # –¢–µ–∫—Å—Ç–æ–≤–∞—è –º–µ—Ç–∫–∞
                ctk.CTkLabel(
                    self.window.scale_frame,
                    text="–ú–∞—Å—à—Ç–∞–± (0.1x - 4.0x)"
                ).pack(pady=2)

                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∫–Ω–∞ –ø–æ–ª–∑—É–Ω–∫–∞
                self.current_layer["scale_flag"] = True
                self.current_layer["scale_frame"] = True

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª–∑—É–Ω–∫–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                
    def adjust_pixelate(self, value):
        """–†–µ–≥—É–ª–∏—Ä—É–µ—Ç –º–æ–∑–∞–∏–∫—É, –æ—Ç–ø—Ä–∞–≤–ª—è—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤ Haskell."""
        if self.mult_process_on:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            factor = round(float(value))
            for i in range(len(self.mult_images)):
                self.mult_images[i] = self.func_helper._apply_pixelate_filter(self.mult_images[i], i, factor)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.display_mult_image(self.mult_images[self.current_image_index])
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if self.current_layer and self.current_layer["image"]:
                try:
                    # –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
                    factor = round(float(value))
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è
                    if factor < 1:
                        raise ValueError("–†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ‚â• 1")
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                    if abs(factor - self.current_layer.get("pixel_value", 0)) < 1:
                        return
                        
                    self.current_layer["pixel_value"] = factor

                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
                    self.current_layer["image"] = self.func_helper._apply_pixelate_filter(self.current_layer["copy"], 0, factor)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    self.display_image(self.current_layer["image"])
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ adjust_pixelate: {str(e)}")
            else:
                # –õ–æ–≥–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –ø–æ–ª–∑—É–Ω–∫–∞
                if getattr(self.window, "pixel_frame", None):
                    self.window.pixel_frame.destroy()
                    self.window.pixel_frame = None
                    self.current_layer["pixel_flag"] = False
                    self.current_layer["pixel_frame"] = False

    def create_pixelate_slider(self):
        """–°–æ–∑–¥–∞—ë—Ç –æ–∫–Ω–æ —Å –ø–æ–ª–∑—É–Ω–∫–æ–º –¥–ª—è –º–æ–∑–∞–∏–∫–∏."""
        def on_slider_release(event):
            try:
                # –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ —Ü–µ–ª–æ–≥–æ
                value = round(float(pixel_slider.get()))
                if 1 <= value <= 15:
                    self.adjust_pixelate(value)
                else:
                    print("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–∂–¥—É 1 –∏ 15")
            except ValueError:
                print("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")

        if self.mult_process_on:
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ—Ä–µ–π–º –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞ –º–æ–∑–∞–∏–∫–∏
                self.window.pixel_frame = ctk.CTkFrame(
                    self.window.right_panel,
                    height=200,
                    width=300
                )
                self.window.pixel_frame.pack(pady=10)

                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∑—É–Ω–æ–∫ –º–æ–∑–∞–∏–∫–∏
                pixel_slider = ctk.CTkSlider(
                    master=self.window.pixel_frame,
                    from_=1,
                    to=15,
                    number_of_steps=15  # –¢–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
                )
                pixel_slider.pack(pady=10)
                pixel_slider.set(1)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

                # –¢–µ–∫—Å—Ç–æ–≤–∞—è –º–µ—Ç–∫–∞
                ctk.CTkLabel(
                    self.window.pixel_frame,
                    text="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (1x - 15x)"
                ).pack(pady=2)

                # –ü—Ä–∏–º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –±–µ–≥—É–Ω–∫–∞
                pixel_slider.bind("<ButtonRelease-1>", on_slider_release)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª–∑—É–Ω–∫–∞ –º–æ–∑–∞–∏–∫–∏: {e}")

        if self.current_layer.get("pixel_flag", False):
            # –ï—Å–ª–∏ –æ–∫–Ω–æ –ø–æ–ª–∑—É–Ω–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
            if getattr(self.window, "pixel_frame", None):
                self.window.pixel_frame.destroy()
                self.window.pixel_frame = None
                self.current_layer["pixel_flag"] = False
        else:
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ—Ä–µ–π–º –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞ –º–æ–∑–∞–∏–∫–∏
                self.window.pixel_frame = ctk.CTkFrame(
                    self.window.right_panel,
                    height=200,
                    width=300
                )
                self.window.pixel_frame.pack(pady=10)

                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∑—É–Ω–æ–∫ –º–æ–∑–∞–∏–∫–∏
                pixel_slider = ctk.CTkSlider(
                    master=self.window.pixel_frame,
                    from_=1,
                    to=15,
                    number_of_steps=15  # –¢–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
                )
                pixel_slider.pack(pady=10)
                if self.current_layer.get("pixel_value"):
                    pixel_slider.set(self.current_layer["pixel_value"])  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                else:
                    pixel_slider.set(1)

                # –¢–µ–∫—Å—Ç–æ–≤–∞—è –º–µ—Ç–∫–∞
                ctk.CTkLabel(
                    self.window.pixel_frame,
                    text="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (1x - 15x)"
                ).pack(pady=2)

                # –ü—Ä–∏–º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –±–µ–≥—É–Ω–∫–∞
                pixel_slider.bind("<ButtonRelease-1>", on_slider_release)

                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∫–Ω–∞ –ø–æ–ª–∑—É–Ω–∫–∞
                self.current_layer["pixel_flag"] = True
                self.current_layer["pixel_frame"] = True

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª–∑—É–Ω–∫–∞ –º–æ–∑–∞–∏–∫–∏: {e}")

    def create_contrast_slider(self):
        """–°–æ–∑–¥–∞—ë—Ç –æ–∫–Ω–æ —Å –ø–æ–ª–∑—É–Ω–∫–æ–º –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏."""
        def on_slider_release(event):
            try:
                # –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                value = round(float(contrast_slider.get()), 2)
                if 0.0 <= value <= 2.0:
                    self.adjust_contrast(value)
                else:
                    print("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–∂–¥—É 0.0 –∏ 2.0")
            except ValueError:
                print("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")

        if self.mult_process_on:
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ—Ä–µ–π–º –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏
                self.window.contrast_frame = ctk.CTkFrame(
                    self.window.right_panel,
                    height=200,
                    width=300
                )
                self.window.contrast_frame.pack(pady=10)

                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∑—É–Ω–æ–∫ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏
                contrast_slider = ctk.CTkSlider(
                    master=self.window.contrast_frame,
                    from_=0.0,
                    to=2.0,
                    number_of_steps=20  # –®–∞–≥–∏ —Å —à–∞–≥–æ–º 0.1
                )
                contrast_slider.pack(pady=10)
                contrast_slider.set(1.0)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

                # –¢–µ–∫—Å—Ç–æ–≤–∞—è –º–µ—Ç–∫–∞
                ctk.CTkLabel(
                    self.window.contrast_frame,
                    text="–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å (0.0x - 2.0x)"
                ).pack(pady=2)

                # –ü—Ä–∏–º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –±–µ–≥—É–Ω–∫–∞
                contrast_slider.bind("<ButtonRelease-1>", on_slider_release)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª–∑—É–Ω–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏: {e}")

        if self.current_layer.get("contrast_flag", False):
            # –ï—Å–ª–∏ –æ–∫–Ω–æ –ø–æ–ª–∑—É–Ω–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
            if getattr(self.window, "contrast_frame", None):
                self.window.contrast_frame.destroy()
                self.window.contrast_frame = None
                self.current_layer["contrast_flag"] = False
        else:
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ—Ä–µ–π–º –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏
                self.window.contrast_frame = ctk.CTkFrame(
                    self.window.right_panel,
                    height=200,
                    width=300
                )
                self.window.contrast_frame.pack(pady=10)

                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∑—É–Ω–æ–∫ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏
                contrast_slider = ctk.CTkSlider(
                    master=self.window.contrast_frame,
                    from_=0.0,
                    to=2.0,
                    number_of_steps=20  # –®–∞–≥–∏ —Å —à–∞–≥–æ–º 0.1
                )
                contrast_slider.pack(pady=10)
                if self.current_layer.get("contrast_value"):
                    contrast_slider.set(self.current_layer["contrast_value"])  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                else:
                    contrast_slider.set(1.0)

                # –¢–µ–∫—Å—Ç–æ–≤–∞—è –º–µ—Ç–∫–∞
                ctk.CTkLabel(
                    self.window.contrast_frame,
                    text="–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å (0.0x - 2.0x)"
                ).pack(pady=2)

                # –ü—Ä–∏–º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –±–µ–≥—É–Ω–∫–∞
                contrast_slider.bind("<ButtonRelease-1>", on_slider_release)

                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∫–Ω–∞ –ø–æ–ª–∑—É–Ω–∫–∞
                self.current_layer["contrast_flag"] = True
                self.current_layer["contrast_frame"] = True

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª–∑—É–Ω–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏: {e}")
    
    def adjust_contrast(self, value):
        """–†–µ–≥—É–ª–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤ Haskell."""
        if self.mult_process_on:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            factor = round(float(value), 2)
            for i in range(len(self.mult_images)):
                self.mult_images[i] = self.func_helper._apply_contrast_filter(self.mult_images[i], i, factor)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.display_mult_image(self.mult_images[self.current_image_index])
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if self.current_layer and self.current_layer["image"]:
                try:
                    # –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                    factor = round(float(value), 2)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                    if abs(factor - self.current_layer.get("contrast_value", 1.0)) < 0.01:
                        return
                        
                    self.current_layer["contrast_value"] = factor

                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
                    self.current_layer["image"] = self.func_helper._apply_contrast_filter(self.current_layer["copy"], 0, factor)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    self.display_image(self.current_layer["image"])
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ adjust_contrast: {str(e)}")
            else:
                # –õ–æ–≥–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –ø–æ–ª–∑—É–Ω–∫–∞
                if getattr(self.window, "contrast_frame", None):
                    self.window.contrast_frame.destroy()
                    self.window.contrast_frame = None
                self.current_layer["contrast_flag"] = False
                self.current_layer["contrast_frame"] = False

    def adjust_rotation(self, value):
        """–†–µ–≥—É–ª–∏—Ä—É–µ—Ç —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤ Haskell."""
        if self.mult_process_on:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            factor = round(float(value), 2)
            for i in range(len(self.mult_images)):
                self.mult_images[i] = self.func_helper._apply_rotation_filter(self.mult_images[i], i, factor)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.display_mult_image(self.mult_images[self.current_image_index])
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if self.current_layer and self.current_layer["image"]:
                try:
                    # –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                    factor = round(float(value), 2)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                    if abs(factor - self.current_layer.get("rotation_value", 0.0)) < 0.01:
                        return
                        
                    self.current_layer["rotation_value"] = factor

                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
                    self.current_layer["image"] = self.func_helper._apply_rotation_filter(self.current_layer["copy"], 0, factor)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    self.display_image(self.current_layer["image"])
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ adjust_rotation: {str(e)}")
            else:
                # –õ–æ–≥–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –ø–æ–ª–∑—É–Ω–∫–∞
                if getattr(self.window, "rotation_frame", None):
                    self.window.rotation_frame.destroy()
                    self.window.rotation_frame = None
                self.current_layer["rotation_flag"] = False
                self.current_layer["rotation_frame"] = False

        
    def create_rotation_slider(self):
        """–°–æ–∑–¥–∞—ë—Ç –æ–∫–Ω–æ —Å –ø–æ–ª–∑—É–Ω–∫–æ–º –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞."""
        def on_slider_release(event):
            try:
                # –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                value = round(float(rotation_slider.get()), 2)
                if -180 <= value <= 180:
                    self.adjust_rotation(value)
                else:
                    print("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–∂–¥—É -180 –∏ 180")
            except ValueError:
                print("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")

        if self.mult_process_on:
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ—Ä–µ–π–º –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞
                self.window.rotation_frame = ctk.CTkFrame(
                    self.window.right_panel,
                    height=200,
                    width=300
                )
                self.window.rotation_frame.pack(pady=10)

                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∑—É–Ω–æ–∫ –ø–æ–≤–æ—Ä–æ—Ç–∞
                rotation_slider = ctk.CTkSlider(
                    master=self.window.rotation_frame,
                    from_=-180,
                    to=180,
                    number_of_steps=360  # –®–∞–≥–∏ —Å —à–∞–≥–æ–º 1
                )
                rotation_slider.pack(pady=10)
                rotation_slider.set(0.0)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

                # –¢–µ–∫—Å—Ç–æ–≤–∞—è –º–µ—Ç–∫–∞
                ctk.CTkLabel(
                    self.window.rotation_frame,
                    text="–ü–æ–≤–æ—Ä–æ—Ç (-180¬∞ - +180¬∞)"
                ).pack(pady=2)

                # –ü—Ä–∏–º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –±–µ–≥—É–Ω–∫–∞
                rotation_slider.bind("<ButtonRelease-1>", on_slider_release)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª–∑—É–Ω–∫–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞: {e}")

        if self.current_layer.get("rotation_flag", False):
            # –ï—Å–ª–∏ –æ–∫–Ω–æ –ø–æ–ª–∑—É–Ω–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
            if getattr(self.window, "rotation_frame", None):
                self.window.rotation_frame.destroy()
                self.window.rotation_frame = None
                self.current_layer["rotation_flag"] = False
        else:
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ—Ä–µ–π–º –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞
                self.window.rotation_frame = ctk.CTkFrame(
                    self.window.right_panel,
                    height=200,
                    width=300
                )
                self.window.rotation_frame.pack(pady=10)

                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∑—É–Ω–æ–∫ –ø–æ–≤–æ—Ä–æ—Ç–∞
                rotation_slider = ctk.CTkSlider(
                    master=self.window.rotation_frame,
                    from_=-180,
                    to=180,
                    number_of_steps=360  # –®–∞–≥–∏ —Å —à–∞–≥–æ–º 1
                )
                rotation_slider.pack(pady=10)
                if self.current_layer.get("rotation_value"):
                    rotation_slider.set(self.current_layer["rotation_value"])  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                else:
                    rotation_slider.set(0.0)

                # –¢–µ–∫—Å—Ç–æ–≤–∞—è –º–µ—Ç–∫–∞
                ctk.CTkLabel(
                    self.window.rotation_frame,
                    text="–ü–æ–≤–æ—Ä–æ—Ç (-180¬∞ - +180¬∞)"
                ).pack(pady=2)

                # –ü—Ä–∏–º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –±–µ–≥—É–Ω–∫–∞
                rotation_slider.bind("<ButtonRelease-1>", on_slider_release)

                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∫–Ω–∞ –ø–æ–ª–∑—É–Ω–∫–∞
                self.current_layer["rotation_flag"] = True
                self.current_layer["rotation_frame"] = True

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª–∑—É–Ω–∫–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞: {e}")

    def hor_flip(self):
        """–ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ü–≤–µ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è Haskell (Negative.hs)."""
        if self.mult_process_on:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            for i in range(len(self.mult_images)):
                self.mult_images[i] = self.func_helper._apply_hor_flip_filter(self.mult_images[i], i)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.display_mult_image(self.mult_images[self.current_image_index])
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥
            if self.current_layer and self.current_layer["image"]:
                image_path = "HaskProj/temp/inputPath/input_horizFlip.png"
                output_path = "HaskProj/temp/outputPath/output_horizFlip.png"
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                os.makedirs("HaskProj", exist_ok=True)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                self.current_layer["copy"].save(image_path)
                if self.window.horiz_flag:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    self.current_layer["image"] = self.current_layer["copy"]
                    self.window.horiz_flag = False
                else:
                    try:
                        # –í—ã–∑—ã–≤–∞–µ–º Haskell-–ø—Ä–æ–≥—Ä–∞–º–º—É Negative.hs —Å –ø–æ–º–æ—â—å—é runhaskell
                        subprocess.run([
                            "./backend_Erbol/Function/ImageTransform/HorizontalFlip/horizontalFlip",
                            image_path,
                            output_path
                        ], check=True)
                        
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        with Image.open(output_path) as img:
                            filtered_image = img.copy()  # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
                        
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        self.delete_file(output_path)
                        self.delete_file(image_path)

                        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ª–æ–µ
                        self.current_layer["image"] = filtered_image
                        self.window.edited_image = filtered_image
                        self.window.horiz_flag = True
                    except subprocess.CalledProcessError as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Haskell-—Ñ–∏–ª—å—Ç—Ä–∞: {e}")
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                self.display_image(self.current_layer["image"])


    def vert_flip(self):
        """–ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ü–≤–µ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è Haskell (Negative.hs)."""
        if self.mult_process_on:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            for i in range(len(self.mult_images)):
                self.mult_images[i] = self.func_helper._apply_vert_flip_filter(self.mult_images[i], i)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.display_mult_image(self.mult_images[self.current_image_index])
        else:
            if self.current_layer and self.current_layer["image"]:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—É—Ç–∏
                input_dir = "HaskProj/temp/inputPath"
                output_dir = "HaskProj/temp/outputPath"
                image_path = os.path.join(input_dir, "input_vertFlip.png")
                output_path = os.path.join(output_dir, "output_vertFlip.png")

                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                os.makedirs(input_dir, exist_ok=True)
                os.makedirs(output_dir, exist_ok=True)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                self.current_layer["copy"].save(image_path)

                if self.window.vert_flag:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    self.current_layer["image"] = self.current_layer["copy"]
                    self.window.vert_flag = False
                else:
                    try:
                        # –í—ã–∑—ã–≤–∞–µ–º Haskell-–ø—Ä–æ–≥—Ä–∞–º–º—É VerticalFlip.hs
                        subprocess.run([
                            "./backend_Erbol/Function/ImageTransform/VerticalFlip/verticalFlip",
                            image_path,
                            output_path
                        ], check=True)

                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        with Image.open(output_path) as img:
                            filtered_image = img.copy()  # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å

                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                        self.delete_file(output_path)
                        self.delete_file(image_path)

                        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ª–æ–µ
                        self.current_layer["image"] = filtered_image
                        self.window.edited_image = filtered_image
                        self.window.vert_flag = True
                    except subprocess.CalledProcessError as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Haskell-—Ñ–∏–ª—å—Ç—Ä–∞: {e}")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞: {e}")

                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                self.display_image(self.current_layer["image"])
    
    def to_sharpen(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–µ–∑–∫–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è Haskell (Sharpen.hs)."""
        if self.mult_process_on:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            for i in range(len(self.mult_images)):
                self.mult_images[i] = self.func_helper._apply_sharpen_filter(self.mult_images[i], i)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.display_mult_image(self.mult_images[self.current_image_index])
        else:
            if self.current_layer and self.current_layer["image"]:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—É—Ç–∏
                input_dir = "HaskProj/temp/inputPath"
                output_dir = "HaskProj/temp/outputPath"
                image_path = os.path.join(input_dir, "input_sharpen.png")
                output_path = os.path.join(output_dir, "output_sharpen.png")

                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                os.makedirs(input_dir, exist_ok=True)
                os.makedirs(output_dir, exist_ok=True)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                self.current_layer["copy"].save(image_path)

                if self.window.sharpen_flag:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    self.current_layer["image"] = self.current_layer["copy"]
                    self.window.sharpen_flag = False
                else:
                    try:
                        # –í—ã–∑—ã–≤–∞–µ–º Haskell-–ø—Ä–æ–≥—Ä–∞–º–º—É Sharpen.hs
                        subprocess.run([
                            "./backend_Erbol/Function/ImageEffects/Sharpen/sharpen",
                            image_path,
                            output_path
                        ], check=True)

                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        with Image.open(output_path) as img:
                            filtered_image = img.copy()  # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å

                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                        self.delete_file(output_path)
                        self.delete_file(image_path)

                        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ª–æ–µ
                        self.current_layer["image"] = filtered_image
                        self.window.edited_image = filtered_image
                        self.window.sharpen_flag = True
                    except subprocess.CalledProcessError as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Haskell-—Ñ–∏–ª—å—Ç—Ä–∞ (sharpen): {e}")
                    except FileNotFoundError as e:
                        print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
                    except Exception as e:
                        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                self.display_image(self.current_layer["image"])


    # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
    def open_child_window(self):

        answer = messagebox.askyesno("Warning!", "When applying filters with this option, you must know in advance which filter to apply, because this option does not have an undo function! Do you want to continue?")
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—á–µ—Ä–Ω–µ–µ –æ–∫–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        if answer:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –∏ —É–Ω–∏—á—Ç–æ–∂–∞–µ–º —Ñ—Ä–µ–π–º—ã
            self.window.negative_flag = False
            self.window.sepia_flag = False
            self.window.grayscale_flag = False

            if self.window.brightness_frame:
                self.window.brightness_frame.destroy()
            if self.window.scale_frame:
                self.window.scale_frame.destroy()
            if self.window.pixel_frame:
                self.window.pixel_frame.destroy()
            if self.window.contrast_frame:
                self.window.contrast_frame.destroy()
            if self.window.rotation_frame:
                self.window.rotation_frame.destroy()

            self.window.scale_frame = None
            self.window.scale_flag = False
            self.window.pixel_frame = None
            self.window.pixel_flag = False
            self.window.contrast_frame = None
            self.window.contrast_flag = False
            self.window.rotation_frame = None
            self.window.rotation_flag = False
            self.window.brightness_frame = None
            self.window.brightness_flag = False

            # –û—á–∏—â–∞–µ–º Canvas
            self.window.canvas.delete("all")
            self.mult_process_on = True

            self.button_down_frame = ctk.CTkFrame(self.window.canvas, fg_color="white")
            self.button_down_frame.pack(side="bottom", pady=10)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –∫–Ω–æ–ø–∫–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã
            if not hasattr(self, "mult_load") or self.mult_load.winfo_exists() == 0:
                # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º –µ—ë
                self.mult_load = ctk.CTkButton(
                    self.button_down_frame,
                    text="üìÇ Open",
                    command=self.load_images
                )
                self.mult_load.grid(row=0, column=0, padx=5)

            if not hasattr(self, "mult_close") or self.mult_close.winfo_exists() == 0:
                # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º –µ—ë
                self.mult_close = ctk.CTkButton(
                    self.button_down_frame,
                    text="üö™ Exit",
                    command=self.on_close
                )
                self.mult_close.grid(row=0, column=1, padx=5)

            if not hasattr(self, "mult_delete") or self.mult_delete.winfo_exists() == 0:
                # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º –µ—ë
                self.mult_delete = ctk.CTkButton(
                    self.button_down_frame,
                    text="üóë Delete all",
                    command=self.delete_all
                )
                self.mult_delete.grid(row=0, column=2, padx=5)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã
            self.buttons_created = True
            self.mult_process_on = True


    def load_images(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞."""
        files = filedialog.askopenfilenames(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            filetypes=[("Image Files", "*.png *.jpg *.jpeg *.bmp")]
        )
        if files:
            self.mult_images = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            input_dir = "HaskProj/temp/multiplProcess/input"
            os.makedirs(input_dir, exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç

            for index, file in enumerate(files):
                image = Image.open(file)
                new_image = {
                    "image": image.copy() if image else None,
                    "brightness_value": 1.0,  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    "copy": image.copy() if image else None,  # –•—Ä–∞–Ω–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª —Å–ª–æ—è
                    "scale_value": 1.0,
                    "bright_flag": False,
                    "scale_flag": False,
                    "scale_frame": False,
                    "bright_frame": False,
                    "br_flag_saved": True,
                    "pixel_value": 1,
                    "pixel_flag": False,
                    "pixel_frame": False,
                    "pixel_flag_saved": True,
                    "contrast_value": 1,
                    "contrast_flag": False,
                    "contrast_frame": False,
                    "rotation_value": 0,
                    "rotation_frame": False,
                    "rotation_flag": False,
                    "position_x": 0,
                    "position_y": 0            
                }
                self.mult_images.append(new_image)  # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
                image_path = os.path.join(input_dir, f"input_{index + 1}.png")
                image.save(image_path)
                print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {image_path}")

            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.mult_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
            if self.mult_images:
                self.display_mult_image(self.mult_images[0])  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        else:
            print("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")

        if len(self.mult_images) > 1:
            # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
            self.button_frame = ctk.CTkFrame(self.window.canvas, fg_color="white")
            self.button_frame.pack(side="top", pady=10)

            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            self.prev_button = ctk.CTkButton(
                self.button_frame,
                text="üëàüèª",
                command=self.prev_image,
                width=50,  # –®–∏—Ä–∏–Ω–∞ –∫–Ω–æ–ø–∫–∏
                height=25  # –í—ã—Å–æ—Ç–∞ –∫–Ω–æ–ø–∫–∏ (—Ä–∞–≤–Ω–∞ —à–∏—Ä–∏–Ω–µ –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã)
            )
            self.prev_button.grid(row=0, column=0, padx=5)  # –†–∞–∑–º–µ—â–∞–µ–º –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ

            # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä—ë–¥"
            self.next_button = ctk.CTkButton(
                self.button_frame,
                text="üëâüèª",
                command=self.next_image,
                width=50,  # –®–∏—Ä–∏–Ω–∞ –∫–Ω–æ–ø–∫–∏
                height=25  # –í—ã—Å–æ—Ç–∞ –∫–Ω–æ–ø–∫–∏ (—Ä–∞–≤–Ω–∞ —à–∏—Ä–∏–Ω–µ –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã)
            )
            self.next_button.grid(row=0, column=1, padx=5)  # –†–∞–∑–º–µ—â–∞–µ–º –≤–æ –≤—Ç–æ—Ä–æ–π –∫–æ–ª–æ–Ω–∫–µ
        self.current_image_index = 0
        
                    
    def on_close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—á–µ—Ä–Ω–µ–µ –æ–∫–Ω–æ –∏ –æ—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã."""
        answer = messagebox.askokcancel("Warning", "Do you want to end?")
        if answer:
            self.mult_load.destroy()
            self.mult_close.destroy()
            self.mult_delete.destroy()
            self.next_button.destroy()
            self.prev_button.destroy()
            self.button_frame.destroy()
            self.button_down_frame.destroy()
            self.mult_images = []  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            
            self.window.canvas.delete("all")
            self.buttons_created = False
            self.mult_process_on = False

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –∏ —É–Ω–∏—á—Ç–æ–∂–∞–µ–º —Ñ—Ä–µ–π–º—ã
            self.window.negative_flag = False
            self.window.sepia_flag = False
            self.window.grayscale_flag = False

            if self.window.brightness_frame:
                self.window.brightness_frame.destroy()
            if self.window.scale_frame:
                self.window.scale_frame.destroy()
            if self.window.pixel_frame:
                self.window.pixel_frame.destroy()
            if self.window.contrast_frame:
                self.window.contrast_frame.destroy()
            if self.window.rotation_frame:
                self.window.rotation_frame.destroy()

            self.window.scale_frame = None
            self.window.scale_flag = False
            self.window.pixel_frame = None
            self.window.pixel_flag = False
            self.window.contrast_frame = None
            self.window.contrast_flag = False
            self.window.rotation_frame = None
            self.window.rotation_flag = False
            self.window.brightness_frame = None
            self.window.brightness_flag = False

            messagebox.showinfo("Info", "All files are in 'temp/multiplProcess/output'")

    def delete_all(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—á–µ—Ä–Ω–µ–µ –æ–∫–Ω–æ –∏ –æ—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã."""
        answer = messagebox.askokcancel("Warning", "Do you want to delete all?")
        if answer:
            self.next_button.destroy()
            self.prev_button.destroy()
            self.button_frame.destroy()
            self.mult_images = []  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

            #–û—á–∏—â–∞–µ–º –ø–∞–ø–∫–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            folderinput_path = "HaskProj/temp/multiplProcess/input"
            for file_name in os.listdir(folderinput_path):
                file_path = os.path.join(folderinput_path, file_name)
                self.delete_file(file_path)

            folderoutput_path = "HaskProj/temp/multiplProcess/output"
            for file_name in os.listdir(folderoutput_path):
                file_path = os.path.join(folderoutput_path, file_name)
                self.delete_file(file_path)

            foldermovein_path = "HaskProj/temp/move/input"
            for file_name in os.listdir(foldermovein_path):
                file_path = os.path.join(foldermovein_path, file_name)
                self.delete_file(file_path)

            foldermoveout_path = "HaskProj/temp/move/output"
            for file_name in os.listdir(foldermoveout_path):
                file_path = os.path.join(foldermoveout_path, file_name)
                self.delete_file(file_path)
            
            self.window.canvas.delete("all")

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –∏ —É–Ω–∏—á—Ç–æ–∂–∞–µ–º —Ñ—Ä–µ–π–º—ã
            self.window.negative_flag = False
            self.window.sepia_flag = False
            self.window.grayscale_flag = False

            if self.window.brightness_frame:
                self.window.brightness_frame.destroy()
            if self.window.scale_frame:
                self.window.scale_frame.destroy()
            if self.window.pixel_frame:
                self.window.pixel_frame.destroy()
            if self.window.contrast_frame:
                self.window.contrast_frame.destroy()
            if self.window.rotation_frame:
                self.window.rotation_frame.destroy()

            self.window.scale_frame = None
            self.window.scale_flag = False
            self.window.pixel_frame = None
            self.window.pixel_flag = False
            self.window.contrast_frame = None
            self.window.contrast_flag = False
            self.window.rotation_frame = None
            self.window.rotation_flag = False
            self.window.brightness_frame = None
            self.window.brightness_flag = False



    def display_mult_image(self, image):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ Canvas."""
        if not image:
            print("–û—à–∏–±–∫–∞: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.")
            return
        
        new_width = int(image.width * 0.6)  # –£–º–µ–Ω—å—à–∞–µ–º —à–∏—Ä–∏–Ω—É –≤ 2 —Ä–∞–∑–∞
        new_height = int(image.height * 0.6)  # –£–º–µ–Ω—å—à–∞–µ–º –≤—ã—Å–æ—Ç—É –≤ 2 —Ä–∞–∑–∞

        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        resized_image = image.resize((new_width, new_height), Image.Resampling.LANCZOS)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è Tkinter
        photo = ImageTk.PhotoImage(resized_image)

        # –û—á–∏—â–∞–µ–º Canvas –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.window.canvas.delete("all")
        self.window.canvas.create_image(600, 400, image=photo, anchor="center")  # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.window.canvas.image = photo  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

    
    def next_image(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
        if not self.mult_images:
            print("–û—à–∏–±–∫–∞: –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
            return

        self.current_image_index = (self.current_image_index + 1) % len(self.mult_images)
        self.display_mult_image(self.mult_images[self.current_image_index])

    def prev_image(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
        if not self.mult_images:
            print("–û—à–∏–±–∫–∞: –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
            return

        self.current_image_index = (self.current_image_index - 1) % len(self.mult_images)
        self.display_mult_image(self.mult_images[self.current_image_index])





    def x_move(self, x_offset):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ (X)"""
        if self.mult_process_on:
            for i in range(len(self.mult_images)):
                self.mult_images[i] = self.func_helper._apply_X_filter(self.mult_images[i], i, x_offset)
            self.display_mult_image(self.mult_images[self.current_image_index])
        else:
            if self.current_layer and self.current_layer["image"]:
                try:
                    # –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
                    self.current_layer["position_x"] = self.current_layer.get("position_x", 0) + x_offset

                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
                    self.current_layer["image"] = self.func_helper._apply_X_filter(
                        self.current_layer["copy"], 0, self.current_layer["position_x"]
                    )

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    os.makedirs("HaskProj/temp/move/input", exist_ok=True)
                    os.makedirs("HaskProj/temp/move/output", exist_ok=True)

                    image_path = f"HaskProj/temp/move/input/picture_moveX_0.png"
                    output_path = f"HaskProj/temp/move/output/picture_moveX_0.png"

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                    if os.path.exists(image_path):
                        self.delete_file(image_path)
                    else:
                        print(f"–§–∞–π–ª {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ")

                    if os.path.exists(output_path):
                        self.delete_file(output_path)
                    else:
                        print(f"–§–∞–π–ª {output_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ")

                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    self.display_image(self.current_layer["image"])
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ x_move: {str(e)}")


    def y_move(self, y_offset):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ (X)"""
        if self.mult_process_on:
            for i in range(len(self.mult_images)):
                self.mult_images[i] = self.func_helper._apply_Y_filter(self.mult_images[i], i, y_offset)
            self.display_mult_image(self.mult_images[self.current_image_index])
        else:
            if self.current_layer and self.current_layer["image"]:
                try:
                    # –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
                    self.current_layer["position_y"] = self.current_layer.get("position_y", 0) + y_offset

                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
                    self.current_layer["image"] = self.func_helper._apply_Y_filter(
                        self.current_layer["copy"], 0, self.current_layer["position_y"]
                    )

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    os.makedirs("HaskProj/temp/move/input", exist_ok=True)
                    os.makedirs("HaskProj/temp/move/output", exist_ok=True)

                    image_path = f"HaskProj/temp/move/input/picture_moveY_0.png"
                    output_path = f"HaskProj/temp/move/output/picture_moveY_0.png"

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                    if os.path.exists(image_path):
                        self.delete_file(image_path)
                    else:
                        print(f"–§–∞–π–ª {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ")

                    if os.path.exists(output_path):
                        self.delete_file(output_path)
                    else:
                        print(f"–§–∞–π–ª {output_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ")

                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    self.display_image(self.current_layer["image"])
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ y_move: {str(e)}")