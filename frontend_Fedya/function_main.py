import customtkinter as ctk
from tkinter import filedialog, messagebox
from PIL import Image, ImageTk, ImageEnhance, ImageOps
import subprocess
import os

class ImageProcces_and_TopMenu:
    
    def __init__(self, window):
        """–ü—Ä–∏–Ω–∏–º–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ `Window`, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å GUI."""
        self.window = window
        self.layers = []
        self.current_layer = None  

    # üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    def save_image(self):
        if self.window.edited_image:
            file_path = filedialog.asksaveasfilename(defaultextension=".png", filetypes=[("PNG files", "*.png")])
            if file_path:
                self.window.edited_image.save(file_path)
                messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
        else:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")
            
    # üìÇ –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    def open_image(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –∫–∞–∫ —Å–ª–æ–π."""
        file_path = filedialog.askopenfilename(filetypes=[("Image files", "*.jpg;*.png;*.jpeg")])
        if file_path:
            self.window.image_path = file_path
            self.window.image = Image.open(file_path)
            self.window.edited_image = self.window.image.copy()
            self.add_layer()
            self.display_image(self.window.edited_image)
        if self.window.image_path:
            self.convert_to_png(self.window.image_path)
        
        self.adjust_brightness(0.7, 1)
        self.save_difference()


    # –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ .png
    def convert_to_png(self, input_path, output_path=None):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç PNG."""
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é (–Ω–µ —á–µ—Ä–µ–∑ open_image)
            with Image.open(input_path) as img:
                # –ï—Å–ª–∏ –≤—ã—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å –Ω–µ –∑–∞–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ –∂–µ –∏–º—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .png
                if not output_path:
                    base = os.path.splitext(input_path)[0]
                    output_path = f"{base}.png"
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ RGB –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                if img.mode in ("RGBA", "P"):
                    img = img.convert("RGB")
                
                img.save(output_path, format="PNG")
                print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {output_path}")
                return output_path

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
            return None


    # –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—è
    def add_layer(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–ª–æ–π –∏ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã–º"""
        new_layer = {
            "name": f"–°–ª–æ–π {len(self.layers) + 1}",
            "image": self.window.edited_image.copy() if self.window.edited_image else None,
            "button": None,
            "brightness_value": 1.0,  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "copy": self.window.edited_image.copy() if self.window.edited_image else None,  # –•—Ä–∞–Ω–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª —Å–ª–æ—è
            "scale_value": 1.0,
            "bright_flag": False,
            "scale_flag": False,
            "scale_frame": False,
            "bright_frame": False,
            "br_flag_saved": True         
        }

        new_layer["button"] = ctk.CTkButton(
            self.window.layers_list, text=new_layer["name"], command=lambda l=new_layer: self.select_layer(l)
        )
        new_layer["button"].pack(fill="x", pady=2, padx=5)

        self.layers.append(new_layer)
        self.select_layer(new_layer)  # –î–µ–ª–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–π –∞–∫—Ç–∏–≤–Ω—ã–º
    

    # –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ—è
    def select_layer(self, layer):
        """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª–æ–π –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –µ–≥–æ –Ω–∞ canvas."""
        self.current_layer = layer  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ª–æ–π
        # –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—è
        for l in self.layers:
            l["button"].configure(fg_color="blue")
        layer["button"].configure(fg_color="red")

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–µ –∫ —ç—Ç–æ–º—É —Å–ª–æ—é
        if layer["image"]:
            self.window.edited_image = self.current_layer["image"]   # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–æ—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É
            self.display_image(layer["image"])
        
        if self.current_layer["bright_flag"] == True:
            self.window.brightness_frame.destroy()
            self.window.brightness_frame = None
            self.current_layer["bright_flag"] = False
            self.current_layer["bright_frame"] = False

        if (self.current_layer["bright_flag"] == False) and (self.current_layer["bright_frame"] == True):
            self.current_layer["bright_flag"] = True
            self.create_brightness_slider() 

        if self.current_layer["scale_flag"] == True:
            self.window.scale_frame.destroy()
            self.window.scale_frame = None
            self.current_layer["scale_flag"] = False
            self.current_layer["scale_frame"] = False

        if (self.current_layer["scale_flag"] == False) and (self.current_layer["scale_frame"] == True):
            self.current_layer["scale_flag"] = True
            self._create_scale_slider_frame()




    # –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ canvas
    def display_image(self, image):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ canvas"""
        if image:
            photo = ImageTk.PhotoImage(image)
            self.window.canvas.delete("all")
            self.window.canvas.create_image(500, 400, image=photo, anchor="center")
            self.window.canvas.image = photo  


     # üîπ –ú–µ–Ω—é (File)
    def top_menu1(self):
        options = ["üìÇ Open", "üíæ Save", "üö™ Exit"]
        self.menu_combobox1 = ctk.CTkComboBox(self.window.top_frame, values=options, command=self.menu_action1)
        self.menu_combobox1.pack(side="left", padx=2)
        self.menu_combobox1.set("File")

    def menu_action1(self, choice):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞."""
        if choice == "üìÇ Open":
            self.open_image()
        elif choice == "üíæ Save":
            self.save_image()
        elif choice == "üö™ Exit":
            self.button_active()

    def top_menu2(self):
        options = ["Scale", "Drawing"]
        self.menu_combobox3 = ctk.CTkComboBox(self.window.top_frame, values=options, command=self.menu_action2)
        self.menu_combobox3.pack(side="left", padx=2)
        self.menu_combobox3.set("Function")

    def menu_action2(self, choice):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞."""
        if choice == "Scale":
            self.create_scale_slider()
        elif choice == "Drawing":
            messagebox.showinfo("–û –Ω–∞—Å", "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: ...")

    # üîπ –ú–µ–Ω—é (General)
    def top_menu3(self):
        options = ["Documentation", "About us...", "Future"]
        self.menu_combobox3 = ctk.CTkComboBox(self.window.top_frame, values=options, command=self.menu_action3)
        self.menu_combobox3.pack(side="left", padx=2)
        self.menu_combobox3.set("General")

    def menu_action3(self, choice):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞."""
        if choice == "Documentation":
            messagebox.showinfo("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
        elif choice == "About us...":
            messagebox.showinfo("–û –Ω–∞—Å", "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: ...")
        elif choice == "Future":
            messagebox.showinfo("–ë—É–¥—É—â–µ–µ", "–ë—É–¥—É—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.")

    def button_active(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º."""
        answer = messagebox.askokcancel("Warning", "Do you want to quit?")
        if answer:
            self.window.root.destroy()
            #–û—á–∏—â–∞–µ–º –ø–∞–ø–∫–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            folderinput_path = "temp/inputPath"
            for file_name in os.listdir(folderinput_path):
                file_path = os.path.join(folderinput_path, file_name)
                self.delete_file(file_path)

            folderoutput_path = "temp/outputPath"
            for file_name in os.listdir(folderoutput_path):
                file_path = os.path.join(folderoutput_path, file_name)
                self.delete_file(file_path)

    # üîπ –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å (–ö–Ω–æ–ø–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤)
    def right_panel_widgets(self):
        """–°–æ–∑–¥–∞—ë—Ç –∫–Ω–æ–ø–∫–∏ –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        self.but1 = ctk.CTkFrame(self.window.tools_frame, width=300, height=300)
        self.but1.pack(side = "bottom", fill="both", padx=5, pady=5)
        self.window.invert_btn = ctk.CTkButton(self.but1, text="Negative", command=self.invert_colors)
        self.window.invert_btn.pack(fill = "x", padx=5, pady=5)

        self.but2 = ctk.CTkFrame(self.window.tools_frame, width=300, height=300)
        self.but2.pack(side = "bottom", fill="both", padx=5, pady=5)
        self.window.bw_btn = ctk.CTkButton(self.but2, text="Grayscale", command=self.to_black_white)
        self.window.bw_btn.pack(fill = "x", padx=5, pady=5)
        
        self.but3 = ctk.CTkFrame(self.window.tools_frame, width=300, height=300)
        self.but3.pack(side = "bottom", fill="both", padx=5, pady=5)
        self.window.sepia_btn = ctk.CTkButton(self.but3, text="Solarize", command=self.to_solarize)
        self.window.sepia_btn.pack(fill = "x", padx=5, pady=5)

        self.but4 = ctk.CTkFrame(self.window.tools_frame, width=300, height=300)
        self.but4.pack(side = "bottom", fill="both", padx=5, pady=5)
        self.window.bright_btn = ctk.CTkButton(self.but4, text="Brightness", command=self.create_brightness_slider)
        self.window.bright_btn.pack(fill = "x", padx=5, pady=5)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    def save_difference(self):
        self.current_layer["copy"] = self.current_layer["image"]
        self.display_image(self.current_layer["image"])
        self.window.negative_flag = False
        self.window.sepia_flag = False
        self.window.grayscale_flag = False
        self.window.brightness_frame.destroy()
        self.window.brightness_frame = None
        self.window.brightness_flag = False
        self.current_layer["bright_flag"] = False
        self.current_layer["bright_frame"] = False
        self.current_layer["scale_flag"] = False
        self.current_layer["scale_frame"] = False
        self.current_layer["br_flag_saved"] = True

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    def delete_file(self, file_path):
        os.remove(file_path)

# –§—É–Ω–∫—Ü–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å Haskell
    # –§—É–Ω–∫—Ü–∏—è Negative
    def invert_colors(self):
        """–ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ü–≤–µ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è Haskell (Negative.hs)."""
        if self.current_layer and self.current_layer["image"]:
            image_path = "temp/inputPath/input_invert.png"
            output_path = "temp/outputPath/output_invert.png"
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            os.makedirs("temp", exist_ok=True)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self.current_layer["copy"].save(image_path)
            if self.window.negative_flag:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                self.current_layer["image"] = self.current_layer["copy"]
                self.window.negative_flag = False
            else:
                try:
                    # –í—ã–∑—ã–≤–∞–µ–º Haskell-–ø—Ä–æ–≥—Ä–∞–º–º—É Negative.hs —Å –ø–æ–º–æ—â—å—é runhaskell
                    subprocess.run([
                        "./backend_Erbol/Function/ImageProcessing/Negative/negative",
                        image_path,
                        output_path
                    ], check=True)
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    with Image.open(output_path) as img:
                        filtered_image = img.copy()  # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    self.delete_file(output_path)
                    self.delete_file(image_path)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ª–æ–µ
                    self.current_layer["image"] = filtered_image
                    self.window.edited_image = filtered_image
                    self.window.negative_flag = True
                except subprocess.CalledProcessError as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Haskell-—Ñ–∏–ª—å—Ç—Ä–∞: {e}")
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.display_image(self.current_layer["image"])

    # –§—É–Ω–∫—Ü–∏—è –ß\–ë
    def to_black_white(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–∂–¥—É —Ü–≤–µ—Ç–Ω—ã–º –∏ —á–µ—Ä–Ω–æ-–±–µ–ª—ã–º, –∏—Å–ø–æ–ª—å–∑—É—è Haskell (Grayscale.hs)."""
        if self.current_layer and self.current_layer["image"]:
            image_path = "temp/inputPath/input_bw.png"
            output_path = "temp/outputPath/output_bw.png"
            os.makedirs("temp", exist_ok=True)
            self.current_layer["copy"].save(image_path)
            if self.window.grayscale_flag:
                self.current_layer["image"] = self.current_layer["copy"]
                self.window.grayscale_flag = False
            else:
                try:
                    subprocess.run([
                        "./backend_Erbol/Function/ImageProcessing/Grayscale/grayscale",
                        image_path,
                        output_path
                    ], check=True)

                    with Image.open(output_path) as img:
                        filtered_image = img.copy()  # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    self.delete_file(output_path)
                    self.delete_file(image_path)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ª–æ–µ
                    self.current_layer["image"] = filtered_image
                    self.window.edited_image = filtered_image
                    self.window.grayscale_flag = True
                except subprocess.CalledProcessError as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Haskell-—Ñ–∏–ª—å—Ç—Ä–∞ (Grayscale): {e}")
            self.display_image(self.current_layer["image"])

    # –§—É–Ω–∫—Ü–∏—è sepia
    def to_solarize(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å–µ–ø–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è Haskell (Solarize.hs)."""
        if self.current_layer and self.current_layer["image"]:
            image_path = "temp/inputPath/input_solarize.png"
            output_path = "temp/outputPath/output_solarize.png"
            os.makedirs("temp", exist_ok=True)
            self.current_layer["copy"].save(image_path)
            if self.window.sepia_flag:
                self.current_layer["image"] = self.current_layer["copy"]
                self.window.sepia_flag = False
                
            else:
                try:
                    subprocess.run([
                        "./backend_Erbol/Function/ImageProcessing/Solarize/solarize",
                        image_path,
                        output_path
                    ], check=True)
                    with Image.open(output_path) as img:
                        filtered_image = img.copy()  # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    self.delete_file(output_path)
                    self.delete_file(image_path)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ª–æ–µ
                    self.current_layer["image"] = filtered_image
                    self.window.edited_image = filtered_image
                    self.window.sepia_flag = True
                except subprocess.CalledProcessError as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Haskell-—Ñ–∏–ª—å—Ç—Ä–∞ (Solarize): {e}")
            self.display_image(self.current_layer["image"])

    # –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —è—Ä–∫–æ—Å—Ç–∏
    def adjust_brightness(self, value, starter):
        """–†–µ–≥—É–ª–∏—Ä—É–µ—Ç —è—Ä–∫–æ—Å—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —è—Ä–∫–æ—Å—Ç–∏ –≤ Haskell."""
        if self.current_layer and self.current_layer["image"]:
            factor = float(value)
            if abs(factor - self.current_layer["brightness_value"]) < 0.01:
                return  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self.current_layer["brightness_value"] = factor

            image_path = "temp/inputPath/input_brightness.png"
            output_path = "temp/outputPath/output_brightness.png"
            os.makedirs("temp", exist_ok=True)
            self.current_layer["copy"].save(image_path)

            try:
                subprocess.run([
                    "./backend_Erbol/Function/ImageProcessing/Brightness/brightness",
                    image_path,
                    output_path,
                    str(factor)
                ], check=True)

                with Image.open(output_path) as img:
                    filtered_image = img.copy()

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                self.delete_file(output_path)
                self.delete_file(image_path)

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ª–æ–µ
                self.current_layer["image"] = filtered_image
                self.window.edited_image = filtered_image
                if starter == 1:
                    self.current_layer["br_flag_saved"] = True
                else:
                    self.current_layer["br_flag_saved"] = False
                self.display_image(filtered_image)
            except subprocess.CalledProcessError as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Haskell-—Ñ–∏–ª—å—Ç—Ä–∞ (Brightness): {e}")
        else:
            if self.window.brightness_frame:
                self.window.brightness_frame.destroy()
                self.window.brightness_frame = None
                self.current_layer["bright_frame"] = False
                self.current_layer["bright_flag"] = False

    # –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–Ω–∞–Ω–∏—è –ø–æ–ª–∑—É–Ω–∫–∞ –¥–ª—è —è—Ä–∫–æ—Å—Ç–∏
    def create_brightness_slider(self):
        """–°–æ–∑–¥–∞—ë—Ç –æ–∫–Ω–æ —Å –ø–æ–ª–∑—É–Ω–∫–æ–º –¥–ª—è —è—Ä–∫–æ—Å—Ç–∏ –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è."""
        def on_slider_release(event):
            try:
                value = float(brightness_slider.get())
                if 0.0 <= value <= 2.0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
                    self.adjust_brightness(value, 0)
                else:
                    print("–û—à–∏–±–∫–∞: –ó–Ω–∞—á–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
            except ValueError:
                print("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏.")

        if self.current_layer["bright_flag"]:
            # –ï—Å–ª–∏ –æ–∫–Ω–æ –ø–æ–ª–∑—É–Ω–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
            if self.current_layer["bright_frame"]:
                self.window.brightness_frame.destroy()
                self.window.brightness_frame = None
                self.current_layer["bright_flag"] = False
                self.current_layer["bright_frame"] = False
        else:
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ—Ä–µ–π–º –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞ —è—Ä–∫–æ—Å—Ç–∏
                self.window.brightness_frame = ctk.CTkFrame(self.window.right_panel, height=300, width=300)
                self.window.brightness_frame.pack(pady=10)

                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∑—É–Ω–æ–∫ —è—Ä–∫–æ—Å—Ç–∏
                brightness_slider = ctk.CTkSlider(
                    master=self.window.brightness_frame,
                    from_=0.0,
                    to=1.0,
                    command=lambda value: None  # –ù–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
                )
                brightness_slider.pack(pady=10)
                if (self.current_layer["br_flag_saved"] == True):
                    brightness_slider.set(1.0)
                else:
                    brightness_slider.set(self.current_layer["brightness_value"])  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

                # –ü—Ä–∏–º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –±–µ–≥—É–Ω–∫–∞
                brightness_slider.bind("<ButtonRelease-1>", on_slider_release)

                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∫–Ω–∞ –ø–æ–ª–∑—É–Ω–∫–∞
                self.current_layer["bright_flag"] = True
                self.current_layer["bright_frame"] = True

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª–∑—É–Ω–∫–∞ —è—Ä–∫–æ—Å—Ç–∏: {e}")


    def create_scale_slider(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–∑—É–Ω–∫–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ scale_flag
        if not hasattr(self.window, 'scale_flag'):
            self.current_layer["scale_flag"] = False

        if self.current_layer["scale_flag"]:
            self.window.scale_frame.destroy()
            self.current_layer["scale_flag"] = False
            self.current_layer["scale_frame"] = False
        else:
            self._create_scale_slider_frame()

    def _create_scale_slider_frame(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ–ª–∑—É–Ω–∫–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            self.window.scale_frame = ctk.CTkFrame(
                self.window.right_panel,
                height=100,
                fg_color=("gray85", "gray25")
            )
            self.window.scale_frame.pack(pady=5, fill='x')

            # –ü–æ–ª–∑—É–Ω–æ–∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            self.scale_slider = ctk.CTkSlider(
                master=self.window.scale_frame,
                from_=0.1,
                to=4.0,
                number_of_steps=40,
                command=lambda value: None
            )
            if self.current_layer and "scale_value" in self.current_layer:
                self.scale_slider.set(self.current_layer["scale_value"])
            else:
                self.scale_slider.set(self.current_layer["scale_value"])  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
            self.scale_slider.pack(pady=5, padx=10, fill='x')

            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            self.scale_slider.bind("<ButtonRelease-1>", self._on_scale_slider_release)

            # –¢–µ–∫—Å—Ç–æ–≤–∞—è –º–µ—Ç–∫–∞
            ctk.CTkLabel(
                self.window.scale_frame,
                text="–ú–∞—Å—à—Ç–∞–± (0.1x - 4.0x)"
            ).pack(pady=2)

            self.current_layer["scale_flag"] = True

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª–∑—É–Ω–æ–∫: {e}")

    def _on_scale_slider_release(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞"""
        if self.current_layer and self.current_layer["image"]:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
            scale_input_path = "temp/inputPath/input_Scale.png"
            scale_output_path = "temp/outputPath/output_Scale.png"
            
            # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            os.makedirs("temp", exist_ok=True)
            
            self.current_layer["copy"].save(scale_input_path)

            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
                scale_factor = self.scale_slider.get()
                subprocess.run([
                    "./backend_Erbol/Function/ImageProcessing/Scale/scale",
                    scale_input_path,
                    scale_output_path,
                    str(scale_factor)
                ], check=True) 
                self.current_layer["scale_value"] = scale_factor
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                with Image.open(scale_output_path) as scaled_img:
                    scaled_img = scaled_img.copy()
                    self.current_layer["image"] = scaled_img
                    self.window.edited_image = scaled_img
                    self.display_image(scaled_img)

                    self.delete_file(scale_input_path)
                    self.delete_file(scale_output_path)
            except subprocess.CalledProcessError as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Haskell-—Ñ–∏–ª—å—Ç—Ä–∞ (Brightness): {e}")
        else:
            if self.window.scale_frame:
                self.window.scale_frame.destroy()
                self.window.scale_frame = None
                self.current_layer["scale_flag"] = False
                self.current_layer["scale_frame"] = False
            